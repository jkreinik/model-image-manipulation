import cv2
import numpy as np

from box import Box


def run():
    params = Box(
        blur=21,
        canny_thresh_1=10,
        canny_thresh_2=15,
        mask_dilate_iter=10,
        mask_erode_iter=10,
        mask_color=(0, 0, 1)
    )

    img = process_image(params)
    save(img)


def process_image(params):
    img = cv2.imread("/Users/ben/PycharmProjects/strip_background/jacket.jpeg")
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, params.canny_thresh_1, params.canny_thresh_2)
    edges = cv2.dilate(edges, None)
    edges = cv2.erode(edges, None)
    contour_info = []
    _, contours, _ = cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)

    for c in contours:
        contour_info.append((
            c,
            cv2.isContourConvex(c),
            cv2.contourArea(c),
        ))

    contour_info = sorted(contour_info, key=lambda c: c[2], reverse=True)
    max_contour = contour_info[0]
    mask = np.zeros(edges.shape)

    cv2.fillConvexPoly(mask, max_contour[0], (255))

    mask = cv2.dilate(mask, None, iterations=params.mask_dilate_iter)
    mask = cv2.erode(mask, None, iterations=params.mask_erode_iter)
    mask = cv2.GaussianBlur(mask, (params.blur, params.blur), 0)
    mask_stack = np.dstack([mask] * 3)  # Create 3-channel alpha mask
    mask_stack = mask_stack.astype('float32') / 255.0  # Use float matrices,
    img = img.astype('float32') / 255.0  # for easy blending
    masked = (mask_stack * img) + ((1 - mask_stack) * params.mask_color)  # Blend
    masked = (masked * 255).astype('uint8')  # Convert back to 8-bit

    c_red, c_green, c_blue = cv2.split(img)

    # merge with mask got on one of a previous steps
    final_img = cv2.merge((c_red, c_green, c_blue, mask.astype('float32') / 255.0))

    return masked


def save(image):
    # save to disk
    cv2.imwrite('output.png', image)


if __name__ == "__main__":
    run()
